#include <pcap.h>
#include <zstd.h>
#include <fstream>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <vector>
#include <filesystem>

namespace fs = std::filesystem;

std::string decompress_zst_to_temp(const std::string& zst_file) {
    std::ifstream in(zst_file, std::ios::binary);
    if (!in) throw std::runtime_error("Cannot open input .zst file");

    in.seekg(0, std::ios::end);
    size_t compressed_size = in.tellg();
    in.seekg(0);

    std::vector<char> compressed_data(compressed_size);
    in.read(compressed_data.data(), compressed_size);

    unsigned long long decompressed_size = ZSTD_getFrameContentSize(compressed_data.data(), compressed_size);
    if (decompressed_size == ZSTD_CONTENTSIZE_ERROR || decompressed_size == ZSTD_CONTENTSIZE_UNKNOWN) {
        throw std::runtime_error("Unable to determine decompressed size");
    }

    std::vector<char> decompressed_data(decompressed_size);
    size_t result = ZSTD_decompress(decompressed_data.data(), decompressed_size,
                                    compressed_data.data(), compressed_size);
    if (ZSTD_isError(result)) {
        throw std::runtime_error("Decompression failed");
    }

    std::string temp_file = fs::temp_directory_path() / fs::path("decompressed_input.pcap");
    std::ofstream out(temp_file, std::ios::binary);
    out.write(decompressed_data.data(), result);
    return temp_file;
}

std::string compress_to_zst(const std::string& pcap_file, const std::string& zst_output_file, int level = 3) {
    std::ifstream in(pcap_file, std::ios::binary);
    if (!in) throw std::runtime_error("Cannot open pcap file to compress");

    in.seekg(0, std::ios::end);
    size_t input_size = in.tellg();
    in.seekg(0);

    std::vector<char> input_data(input_size);
    in.read(input_data.data(), input_size);

    size_t bound = ZSTD_compressBound(input_size);
    std::vector<char> compressed(bound);

    size_t compressed_size = ZSTD_compress(compressed.data(), bound,
                                           input_data.data(), input_size, level);
    if (ZSTD_isError(compressed_size)) {
        throw std::runtime_error("Compression failed");
    }

    std::ofstream out(zst_output_file, std::ios::binary);
    out.write(compressed.data(), compressed_size);

    return zst_output_file;
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        std::cerr << "Usage: " << argv[0] << " <input.pcap.zst> <output.pcap.zst>\n";
        return 1;
    }

    const std::string input_zst = argv[1];
    const std::string output_zst = argv[2];

    try {
        std::string temp_input = decompress_zst_to_temp(input_zst);
        std::string temp_output = fs::temp_directory_path() / fs::path("filtered_output.pcap");

        char errbuf[PCAP_ERRBUF_SIZE];
        pcap_t* input_handle = pcap_open_offline(temp_input.c_str(), errbuf);
        if (!input_handle) {
            std::cerr << "Failed to open decompressed input pcap: " << errbuf << '\n';
            return 1;
        }

        pcap_t* dead_handle = pcap_open_dead(pcap_datalink(input_handle), 65535);
        pcap_dumper_t* dumper = pcap_dump_open(dead_handle, temp_output.c_str());
        if (!dumper) {
            std::cerr << "Failed to create dumper: " << pcap_geterr(dead_handle) << '\n';
            return 1;
        }

        srand(static_cast<unsigned>(time(nullptr)));
        const int max_skip = 5;
        int packets_to_skip = 0;

        struct pcap_pkthdr* header;
        const u_char* data;
        int status;

        while ((status = pcap_next_ex(input_handle, &header, &data)) >= 0) {
            if (packets_to_skip > 0) {
                --packets_to_skip;
                continue;
            }

            bool start_skipping = (rand() % 5 == 0);
            if (start_skipping) {
                packets_to_skip = rand() % (max_skip + 1);
            }

            pcap_dump(reinterpret_cast<u_char*>(dumper), header, data);
        }

        pcap_dump_close(dumper);
        pcap_close(input_handle);
        pcap_close(dead_handle);

        compress_to_zst(temp_output, output_zst);

        std::cout << "Output written to: " << output_zst << "\n";

        // Cleanup
        std::remove(temp_input.c_str());
        std::remove(temp_output.c_str());

    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << "\n";
        return 1;
    }

    return 0;
}
